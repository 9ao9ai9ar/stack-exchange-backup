# generated by datamodel-codegen:
#   filename:  openapi.yaml

from __future__ import annotations

from typing import Any, Literal

from pydantic import AnyUrl, Field, SecretStr
from stackexchange._model_base import MyBaseModel
from typing_extensions import Annotated


class Answer(MyBaseModel):
    """
    This type represents an answer to a question on one of the Stack Exchange sites, such as this famous answer of bobince's.

    As on the question page, it is possible to fetch the comments on an answer as part of a call; though this is not done by default.

    The upvoted, downvoted, and accepted fields can only be queried for with an access_token with the private_info scope.

    """

    accepted: bool | None = None
    answer_id: int | None = None
    """
    refers to an Answer
    """
    awarded_bounty_amount: int | None = None
    awarded_bounty_users: list[ShallowUser] | None = None
    body: str | None = None
    """
    unchanged in unsafe filters
    """
    body_markdown: str | None = None
    can_comment: bool | None = None
    can_edit: bool | None = None
    can_flag: bool | None = None
    can_suggest_edit: bool | None = None
    collectives: list[Collective] | None = None
    comment_count: int | None = None
    comments: list[Comment] | None = None
    community_owned_date: int | None = None
    content_license: str | None = None
    creation_date: int | None = None
    down_vote_count: int | None = None
    downvoted: Any | None = None
    """
    private_info
    """
    is_accepted: bool | None = None
    last_activity_date: int | None = None
    last_edit_date: int | None = None
    last_editor: ShallowUser | None = None
    link: str | None = None
    """
    unchanged in unsafe filters
    """
    locked_date: int | None = None
    owner: ShallowUser | None = None
    posted_by_collectives: list[Collective] | None = None
    question_id: int | None = None
    """
    refers to a Question
    """
    recommendations: list[CollectiveRecommendation] | None = None
    score: int | None = None
    share_link: str | None = None
    """
    unchanged in unsafe filters
    """
    tags: list[str] | None = None
    title: str | None = None
    up_vote_count: int | None = None
    upvoted: bool | None = None
    """
    private_info
    """


class AssociatedUsersParametersQuery(MyBaseModel):
    auth: Auth | None = None
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """
    filter: str | None = None
    """
    Filters allow applications to reduce API responses to just the fields they are concerned with, 
    saving bandwidth.

    """
    paging: Paging | None = None
    types: list[Literal["main_site", "meta_site"]] | None = None
    """
    Specify, semicolon delimited, main_site or meta_site to filter by site.
    """


class Auth(MyBaseModel):
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """

    key: str | None = None
    access_token: SecretStr | None = None


class BadgeCount(MyBaseModel):
    """
    This type represents the total Badges, segregated by rank, a user has earned.

    """

    bronze: int | None = None
    gold: int | None = None
    silver: int | None = None


class ClosedDetails(MyBaseModel):
    """
    This type represents details about a question closure.

    """

    by_users: list[ShallowUser] | None = None
    description: str | None = None
    """
    unchanged in unsafe filters
    """
    on_hold: bool | None = None
    original_questions: list[OriginalQuestion] | None = None
    reason: str | None = None
    """
    unchanged in unsafe filters
    """


class Collective(MyBaseModel):
    """
    This type represents a collective on a Stack Exchange site.

    """

    description: str | None = None
    external_links: list[CollectiveExternalLink] | None = None
    link: str | None = None
    name: str | None = None
    slug: str | None = None
    tags: list[str] | None = None


class CollectiveExternalLink(MyBaseModel):
    """
    Represents a collective's external link.

    """

    link: str | None = None
    type: (
        Literal[
            "website",
            "twitter",
            "github",
            "facebook",
            "instagram",
            "support",
            "linkedin",
        ]
        | None
    ) = None


class CollectiveRecommendation(MyBaseModel):
    """
    Represents a collective's recommendation of an answer.

    """

    collective: Collective | None = None
    creation_date: int | None = None


class Comment(MyBaseModel):
    """
    All Questions and Answers on a Stack Exchange site can be commented on, and this type represents those comments.

    Comments can also be optionally directed at users, when this is the case the reply_to_user property is set (if it is requested in the current filter).

    The upvoted field can only be queried for with an access_token with the private_info scope.

    """

    body: str | None = None
    """
    unchanged in unsafe filters
    """
    body_markdown: str | None = None
    can_flag: bool | None = None
    comment_id: int | None = None
    """
    refers to a Comment
    """
    content_license: str | None = None
    creation_date: int | None = None
    edited: bool | None = None
    link: str | None = None
    """
    unchanged in unsafe filters
    """
    owner: ShallowUser | None = None
    post_id: int | None = None
    """
    refers to a Post
    """
    post_type: Literal["question", "answer", "article"] | None = None
    reply_to_user: ShallowUser | None = None
    score: int | None = None
    upvoted: bool | None = None
    """
    private_info
    """


class Complex(MyBaseModel):
    sort: str | Literal["activity", "creation", "votes"] | None = None
    min: int | None = None
    max: int | None = None
    fromdate: int | None = None
    """
    Defines the lower bound of creation_date.
    """
    todate: int | None = None
    """
    Defines the upper bound of creation_date.
    """
    order: Literal["asc", "desc"] | None = None
    """
    Omitted in the documentation, but is always found to accompany other properties in the group.
    """


class CreateFilterParametersQuery(MyBaseModel):
    auth: Auth | None = None
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """
    filter: str | None = None
    """
    Filters allow applications to reduce API responses to just the fields they are concerned with, 
    saving bandwidth.

    """
    include: list[str] | None = None
    exclude: list[str] | None = None
    base: str | None = None
    unsafe: bool | None = False


class Error(MyBaseModel):
    """
    This type is used to describe the errors that can be returned by the API.

    It is not expected that many applications will concern themselves with this type. It is made available for development and testing purposes.

    Note that the field-name description for each record returned differs from the field-name error_message that is part of the common response wrapper on individual API requests.

    """

    description: str | None = None
    error_id: int | None = None
    """
    refers to an Error
    """
    error_name: str | None = None


class Filter(MyBaseModel):
    """
    This type describes a filter on the API.

    When passing a filter to methods in the API, it should be referred to by name alone.

    """

    filter: str | None = None
    filter_type: Literal["safe", "unsafe", "invalid"] | None = None
    included_fields: list[str] | None = None


class MigrationInfo(MyBaseModel):
    """
    This type represents a question's migration to or from a different site in the Stack Exchange network.

    """

    on_date: int | None = None
    other_site: Site | None = None
    question_id: int | None = None
    """
    refers to a Question
    """


class NetworkPost(MyBaseModel):
    """
    This type represents a post on the network, however it is greatly reduced when compared to the full Post type to reduce the amount of work that needs to be done to fetch it from multiple sites in the network.

    """

    post_id: int | None = None
    """
    refers to a Post
    """
    post_type: Literal["question", "answer", "article"] | None = None
    score: int | None = None
    title: str | None = None


class NetworkUser(MyBaseModel):
    """
    This type represents a user, however it is greatly reduced when compared to the full User type to reduce the amount of work that needs to be done to fetch it from multiple sites in the network.

    """

    account_id: int | None = None
    answer_count: int | None = None
    badge_counts: BadgeCount | None = None
    creation_date: int | None = None
    last_access_date: int | None = None
    question_count: int | None = None
    reputation: int | None = None
    site_name: str | None = None
    site_url: AnyUrl | None = None
    top_answers: list[NetworkPost] | None = None
    top_questions: list[NetworkPost] | None = None
    user_id: int | None = None
    """
    refers to a User
    """
    user_type: (
        Literal[
            "unregistered", "registered", "moderator", "team_admin", "does_not_exist"
        ]
        | None
    ) = None


class Notice(MyBaseModel):
    """
    Represents a notice on a post.

    """

    body: str | None = None
    """
    unchanged in unsafe filters
    """
    creation_date: int | None = None
    owner_user_id: int | None = None


class OriginalQuestion(MyBaseModel):
    """
    This type represents an "original" question that another was closed as a duplicate of.

    This type is mostly analogous to a row in the "gray box" that appears in questions closed a dupes which lists original questions.

    """

    accepted_answer_id: int | None = None
    answer_count: int | None = None
    question_id: int | None = None
    """
    refers to a Question
    """
    title: str | None = None


class Paging(MyBaseModel):
    page: Annotated[int | None, Field(ge=1, le=2147483647)] = 1
    """
    Minimum and maximum values determined from testing.
    """
    pagesize: Annotated[int | None, Field(ge=0, le=100)] = 30
    """
    The effective minimum and maximum are, respectively, -2^31 and 100, 
    with the sole exception of the /sites route for which the effective maximum is 2^31 - 2, 
    beyond which a bad_parameter error is returned.
    Negative integers are treated as 0.

    """


class Question(MyBaseModel):
    """
    This type represents a question on one of the Stack Exchange sites, such as this famous RegEx question.

    This type is heavily inspired by the question page itself, and can optionally return comments and answers accordingly.

    The upvoted, downvoted, and favorited fields can only be queried for with an access_token with the private_info scope.

    """

    accepted_answer_id: int | None = None
    answer_count: int | None = None
    answers: list[Answer] | None = None
    body: str | None = None
    """
    unchanged in unsafe filters
    """
    body_markdown: str | None = None
    bounty_amount: int | None = None
    bounty_closes_date: int | None = None
    bounty_user: ShallowUser | None = None
    can_answer: bool | None = None
    can_close: bool | None = None
    can_comment: bool | None = None
    can_edit: bool | None = None
    can_flag: bool | None = None
    can_suggest_edit: bool | None = None
    close_vote_count: int | None = None
    closed_date: int | None = None
    closed_details: ClosedDetails | None = None
    closed_reason: str | None = None
    collectives: list[Collective] | None = None
    comment_count: int | None = None
    comments: list[Comment] | None = None
    community_owned_date: int | None = None
    content_license: str | None = None
    creation_date: int | None = None
    delete_vote_count: int | None = None
    down_vote_count: int | None = None
    downvoted: Any | None = None
    """
    private_info
    """
    favorite_count: int | None = None
    favorited: bool | None = None
    """
    private_info
    """
    is_answered: bool | None = None
    last_activity_date: int | None = None
    last_edit_date: int | None = None
    last_editor: ShallowUser | None = None
    link: str | None = None
    """
    unchanged in unsafe filters
    """
    locked_date: int | None = None
    migrated_from: MigrationInfo | None = None
    migrated_to: MigrationInfo | None = None
    notice: Notice | None = None
    owner: ShallowUser | None = None
    posted_by_collectives: list[Collective] | None = None
    protected_date: int | None = None
    question_id: int | None = None
    """
    refers to a Question
    """
    reopen_vote_count: int | None = None
    score: int | None = None
    share_link: str | None = None
    """
    unchanged in unsafe filters
    """
    tags: list[str] | None = None
    title: str | None = None
    up_vote_count: int | None = None
    upvoted: bool | None = None
    """
    private_info
    """
    view_count: int | None = None


class QuestionsByIdsParametersQuery(MyBaseModel):
    auth: Auth | None = None
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """
    site: str | None = None
    """
    Per-site methods operates on a single site at a time, identified by the site parameter. 
    This parameter can be the full domain name (ie. "stackoverflow.com"), 
    or a short form identified by api_site_parameter on the Site object.

    """
    filter: str | None = None
    """
    Filters allow applications to reduce API responses to just the fields they are concerned with, 
    saving bandwidth.

    """
    paging: Paging | None = None
    complex: Complex | None = None


class QuestionsOnUsersParametersQuery(QuestionsByIdsParametersQuery):
    pass


class RelatedSite(MyBaseModel):
    """
    This type represents a site that is related in some way to another site.

    Examples include chat and meta, and parent sites.

    Applications should be able to gracefully handle the additon of new related site types.

    """

    api_site_parameter: str | None = None
    name: str | None = None
    relation: str | None = None
    """
    one of parent, meta, or chat, but new options may be added.
    """
    site_url: AnyUrl | None = None
    """
    unchanged in unsafe filters
    """


class ResponseWrapper(MyBaseModel):
    backoff: int | None = None
    error_id: int | None = None
    """
    refers to an Error
    """
    error_message: str | None = None
    error_name: str | None = None
    has_more: bool | None = None
    items: list[dict[str, Any]] | None = None
    """
    an array of the type found in type
    """
    page: int | None = None
    page_size: int | None = None
    quota_max: int | None = None
    quota_remaining: int | None = None
    total: int | None = None
    type: str | None = None


class ShallowUser(MyBaseModel):
    """
    This type represents a user, but omits many of the fields found on the full User type.

    This type is mostly analogous to the "user card" found on many pages (like the question page) on a Stack Exchange site.

    """

    accept_rate: int | None = None
    account_id: int | None = None
    badge_counts: BadgeCount | None = None
    display_name: str | None = None
    link: str | None = None
    """
    unchanged in unsafe filters
    """
    profile_image: str | None = None
    """
    unchanged in unsafe filters
    """
    reputation: int | None = None
    user_id: int | None = None
    """
    refers to a User
    """
    user_type: (
        Literal[
            "unregistered", "registered", "moderator", "team_admin", "does_not_exist"
        ]
        | None
    ) = None


class SimulateErrorParametersQuery(MyBaseModel):
    auth: Auth | None = None
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """
    filter: str | None = None
    """
    Filters allow applications to reduce API responses to just the fields they are concerned with, 
    saving bandwidth.

    """


class Site(MyBaseModel):
    """
    This type represents a site in the Stack Exchange network.

    """

    aliases: list[str] | None = None
    api_site_parameter: str | None = None
    audience: str | None = None
    closed_beta_date: int | None = None
    favicon_url: AnyUrl | None = None
    high_resolution_icon_url: AnyUrl | None = None
    icon_url: AnyUrl | None = None
    launch_date: int | None = None
    logo_url: AnyUrl | None = None
    markdown_extensions: list[str] | None = None
    """
    an array of 'MathJax', 'Prettify', 'Balsamiq' or 'jTab' strings, but new options may be added.
    """
    name: str | None = None
    open_beta_date: int | None = None
    related_sites: list[RelatedSite] | None = None
    site_state: Literal["normal", "closed_beta", "open_beta", "linked_meta"] | None = (
        None
    )
    site_type: str | None = None
    """
    one of main_site or meta_site, but new options may be added.
    """
    site_url: AnyUrl | None = None
    styling: Styling | None = None
    twitter_account: str | None = None


class SitesParametersQuery(MyBaseModel):
    auth: Auth | None = None
    """
    More information can be found at https://api.stackexchange.com/docs/authentication.

    """
    filter: str | None = None
    """
    Filters allow applications to reduce API responses to just the fields they are concerned with, 
    saving bandwidth.

    """
    paging: Paging | None = None


class Styling(MyBaseModel):
    """
    This type represents some stylings of a site in the Stack Exchange network.

    These stylings are meant to allow developers to subtly vary the presentation of resources in their applications so as to indicate to users the original source site.

    Applications should be able to gracefully handle these styles changes, though they can safely assume that these style changes are infrequent.

    Note that colors can be returned either as six or three digit hex triplets.

    """

    link_color: str | None = None
    tag_background_color: str | None = None
    tag_foreground_color: str | None = None


class AnswersOnUsersParametersQuery(QuestionsByIdsParametersQuery):
    pass


class ReadFilterParametersQuery(SimulateErrorParametersQuery):
    pass
